package it.italiaonline.rnd.builders

import spock.lang.Specification
import spock.lang.Shared
import spock.lang.Unroll
import spock.lang.AutoCleanup

// to do a functional test
import ratpack.groovy.test.GroovyRatpackMainApplicationUnderTest

// local
import it.italiaonline.rnd.charts.Size
import it.italiaonline.rnd.charts.Labels
import it.italiaonline.rnd.charts.DataSource
import it.italiaonline.rnd.charts.SupportedCharts
import it.italiaonline.rnd.time.TimeSeries
import it.italiaonline.rnd.time.TimeGranularity
//import it.italiaonline.rnd.rest.LineChartRequest
import it.italiaonline.rnd.colors.Colors

/**
 * Build a json representation of the json post payload
 * needed to query the charts rest service
 */
class LineChartRequestSpec extends Specification {

	@Shared
	String  defaultTitle      = ''
	@Shared
	Size    chartLow          = new Size(1000,300)
	@Shared
	Labels  defaultAxisLabels = new Labels('','')
	@Shared
	Boolean defaultLegend     = false
	// time series
	@Shared
	List xValues = new TimeSeries (
		Date.parse('y-MM','2016-04'),
		Date.parse('y-MM','2017-04'),
		'y-MM',
		TimeGranularity.MONTH
	).series()
	@Shared
	List yValues = [10, 1, 5, 3, 9, 4, 1, 4, 7, 10, 1, 5, 13]
	@Shared
	DataSource ds1 = new DataSource (
	                  'ds1',
	                  xValues,
	                  yValues,
	                  Colors.PASSION_RED.color
	                )
	@Shared
	List defaultDataSources = [ds1]

	@Shared
	String base64 = ''

	def "Should return the base64 representation of the chart"() {
		given: 'a linechart payload for the chart service'
			def chartPayload = new ChartsRestPayload (
			                     SupportedCharts.LINECHART,
			                     chartLow,
			                     defaultDataSources
			                   )
		and: 'a stub connection url'
			URL url = GroovyMock()

		when: 'require a base64 encoded images of the requested chart'
			//def result = new LineChartRequest (
			//                  url,
			//                  chartPayload.json()
			//                ).base64
		then:
			1 * url.getBytes() >> new File('src/test/groovy/it/italiaonline/rnd/assets/line_chart.png').bytes
			result == base64
	}
}
